---
name: tests

on:
  push:
    branches: [master]
    paths-ignore:
      - "docs/**"
      - "README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "docs/**"
      - "README.md"
  schedule:
    # Run every Sunday
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            dev-requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make requirements

      - name: Lint
        run: |
          make lint

      - name: Build documentation
        run: |
          make docs

  tests:
    name: Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    needs: code-quality
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest
        python-version: ["3.11", "3.12"]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            dev-requirements.txt

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3
        with:
          auto-activate-base: true
          activate-environment: ""
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@307e5e5842748e3752d5178fbd158e0a6c1b55ff # v0.8.12
        with:
          cache: false
          run-install: false

      - name: Set up Poetry
        uses: abatilo/actions-poetry@0dd19c9498c3dc8728967849d0d2eae428a8a3d8 # v4
        with:
          poetry-version: latest

      - name: Cache conda packages
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        env:
          # Increase this value to reset cache explicitly
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('ccds/hook_utils/dependencies.py') }}

      - name: Setup for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          # Install GNU make
          choco install --verbose make
          # Add conda binaries directory to PATH so that conda is accessible
          echo "${CONDA}\Scripts" >> $GITHUB_PATH
          # Set bash executable explicitly since Make may pick wrong shell
          echo "BASH_EXECUTABLE=$(which bash)" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make requirements

      - name: Check dependencies
        run: |
          if [[ -z "${BASH_EXECUTABLE}" ]]; then
            bash --version
          else
            echo $BASH_EXECUTABLE
            $BASH_EXECUTABLE --version
          fi
          which make
          make --version
          which conda
          conda --version
          which pipenv
          pipenv --version
          which virtualenv
          virtualenv --version
          which pixi
          pixi --version
          which poetry
          poetry --version
          which python
          python --version
          python -c "import platform; print(f'Python architecture: {platform.architecture()}')"

      - name: Run tests
        run: |
          make test
