[tox]
minversion=3.7
#envlist={py27,py35,py36}, coverage, fix_lint, flake8, docs,
envlist={py36}, flake8, docs, package_description
skip_missing_interpreters = True

[testenv]
deps=-r{toxinidir}/requirements.txt
     -r{toxinidir}/requirements.testing.txt
#deps =
#    flake8
#    coverage: coverage >= 4.4.1, < 5
passenv = JIRA_USER JIRA_PASSWORD JIRA_URL JIRA_CERT_PATH JENKINS_URL
#commands=py.test

[testenv:py27]
deps =
    {[testenv]deps}
    pytest

[testenv:py36]
description = run the tests with pytest under {basepython}
setenv = PIP_DISABLE_VERSION_CHECK = 1
         COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
deps =
    {[testenv]deps}
extras = testing
#commands = pytest {posargs:\
#           --cov="{envsitepackagesdir}/tox" \
#           --cov-config="{toxinidir}/tox.ini"  \
#           --timeout=180 \
#           -n={env:PYTEST_XDIST_PROC_NR:auto} \
#           --junitxml={env:JUNIT_XML_FILE:{toxworkdir}/.test.{envname}.xml} \
#           . }

[testenv:flake8]
deps = flake8
commands = flake8
usedevelop = True

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
basepython = python3.6
extras = docs
#whitelist_externals = make
deps =
    {[testenv]deps}
#commands = sphinx-build -b html ./docs _build/
commands = sphinx-build ./docs _build --color -W -bhtml {posargs}
           python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "_build" / "index.html"))'
usedevelop = True

[testenv:package_description]
description = check that the long description is valid
basepython = python3.6
deps = twine >= 1.12.1
       # jira >= 2.0.0
       # TODO installing readme-renderer[md] should not be necessary
       readme-renderer[md] >= 24.0
       pip >= 18.0.0
skip_install = true
extras =
commands = pip wheel -w {envtmpdir}/build --no-deps .
           twine check {envtmpdir}/build/*

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
basepython = python3.6
passenv = {[testenv]passenv}
          HOMEPATH
          # without PROGRAMDATA cloning using git for Windows will fail with an
          # `error setting certificate verify locations` error
          PROGRAMDATA
extras = lint
deps =
    {[testenv]deps}
skip_install = True
commands = pre-commit run --all-files --show-diff-on-failure
           python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
              generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
deps = {[testenv]deps}
       diff_cover
skip_install = True
passenv = {[testenv]passenv}
          DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
commands = coverage erase
           coverage combine
           coverage report -m
           coverage xml -o {toxworkdir}/coverage.xml
           coverage html -d {toxworkdir}/htmlcov
           diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/coverage.xml
#depends = py27, py34, py35, py36, py37, pypy, pypy3
parallel_show_output = True

[testenv:dev]
description = dev environment with all deps at {envdir}
extras = testing, docs
deps = {[testenv]deps}
usedevelop = True
commands = python -m pip list --format=columns
           python -c "print(r'{envpython}')"

[flake8]
max-complexity = 22
max-line-length = 99
#ignore = E203, W503, C901

[pep8]
max-line-length = 99
