[tox]
minversion=3.7
#envlist=clean, flake8, {py27,py37,py38}, coverage, fix_lint, docs, package_description
envlist=clean, flake8, {py38}, package_description, coverage
skip_missing_interpreters = True
#skipsdist = True

[testenv]
deps=-r{toxinidir}/requirements.txt
     -r{toxinidir}/requirements.testing.txt
depends =
    {py37,py38}: clean
#    report: py38
passenv = JIRA_USER JIRA_PASSWORD JIRA_URL JIRA_CERT_PATH JENKINS_URL
commands = pytest -s --cov=hooks --cov-append --cov-report=xml --junit-xml=output/pytest-report.xml
#commands = python setup.py develop
#           pytest
usedevelop=True

[testenv:clean]
#deps = coverage
#skip_install = true
commands = ./clean.sh
# coverage erase

[testenv:py27]
deps =
    {[testenv]deps}
    pytest

[testenv:py37]
description = run the tests with pytest under {basepython}
basepython = python3.7
setenv = PIP_DISABLE_VERSION_CHECK = 1
         COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
deps =
    {[testenv]deps}
extras = testing

[testenv:py38]
description = run the tests with pytest under {basepython}
basepython = /opt/ansible/env38/bin/python3.8
setenv = PIP_DISABLE_VERSION_CHECK = 1
         COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
deps =
    {[testenv]deps}
extras = testing
#commands = pytest {posargs:\
#           --cov="{envsitepackagesdir}/tox" \
#           --cov-config="{toxinidir}/tox.ini"  \
#           --junit-xml={env:JUNIT_XML_FILE:{toxworkdir}/.test.{envname}.xml} \
#           . }

[testenv:flake8]
deps =
    {[testenv]deps}
commands = flake8
usedevelop = True
ignore = D203
exclude =
    # No need to traverse our git directory
    .git,
    # There's no value in checking cache directories
    __pycache__,
    # The conf file is mostly autogenerated, ignore it
    docs/source/conf.py,
    # The old directory contains Flake8 2.0
    old,
    # This contains our built documentation
    build,
    # This contains builds of flake8 that we don't want to check
    dist

[testenv:linters]
deps = {[testenv:flake8]deps}
usedevelop = False
commands = flake8 {posargs} hooks
           flake8 {posargs} tests
           bandit-baseline -r bandit -ll -ii

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
basepython = /opt/ansible/env38/bin/python3.8
extras = docs
#whitelist_externals = make
deps =
    {[testenv]deps}
#commands = sphinx-build -b html ./docs _build/
commands = sphinx-build ./docs _build --color -W -bhtml {posargs}
           python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "_build" / "index.html"))'
usedevelop = True

[testenv:package_description]
description = check that the long description is valid
basepython = /opt/ansible/env38/bin/python3.8
deps = twine >= 1.12.1
       # jira >= 2.0.0
       # TODO installing readme-renderer[md] should not be necessary
       readme-renderer[md] >= 24.0
       pip >= 18.0.0
skip_install = true
extras =
commands = pip wheel -w {envtmpdir}/build --no-deps .
           twine check {envtmpdir}/build/*

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
basepython = /opt/ansible/env38/bin/python3.8
passenv = {[testenv]passenv}
          HOMEPATH
          # without PROGRAMDATA cloning using git for Windows will fail with an
          # `error setting certificate verify locations` error
          PROGRAMDATA
extras = lint
deps =
    {[testenv]deps}
skip_install = True
commands = pre-commit run --all-files --show-diff-on-failure
           python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[testenv:report]
deps = coverage
depends =
    {py37,py38}: testenv
skip_install = true
setenv = COVERAGE_FILE={toxworkdir}/.coverage
#commands = coverage erase
commands = coverage combine
           coverage report -m
           coverage xml -o output/coverage.xml
           coverage html -d output/htmlcov

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
              generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
deps = {[testenv]deps}
       {py37,py38}: testenv
       diff_cover
skip_install = true
passenv = {[testenv]passenv}
          DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
#commands = coverage erase
commands = coverage combine
           coverage report -m
           coverage xml -o output/coverage.xml
           coverage html -d output/htmlcov
           diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} output/coverage.xml
#depends = py27, py37, py38, pypy, pypy3
#parallel_show_output = True

[testenv:dev]
description = dev environment with all deps at {envdir}
extras = testing, docs
deps = {[testenv]deps}
usedevelop = True
commands = python -m pip list --format=columns
           python -c "print(r'{envpython}')"

[flake8]
max-complexity = 22
max-line-length = 99
#ignore = E203, W503, C901

[pep8]
max-line-length = 99
